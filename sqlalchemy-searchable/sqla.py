from sqlalchemy import Column, Integer, Unicode, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy_searchable import make_searchable
from sqlalchemy_utils.types import TSVectorType
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

Base = declarative_base()
make_searchable()


class Book(Base):

    __tablename__ = 'book'

    id = Column(Integer, primary_key=True)

    title = Column(Unicode(255), nullable=False)

    description = Column(Unicode(255), nullable=False)

#    book_authors = relationship(
#        "BookAuthor",
#        cascade="all, delete-orphan",
#        backref='book'
#    )

    search_vector = Column(TSVectorType('title', 'description'))

    def __init__(self, title):
        self.title = title


class Author(Base):

    __tablename__ = 'author'

    id = Column(Integer, primary_key=True)

    name = Column(Unicode, nullable=False)

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return 'Author(%s)' % self.name


class BookAuthor(Base):

    __tablename__ = 'bookauthor'

    book_id = Column(
        Integer,
        ForeignKey('book.id'),
        primary_key=True
    )
    author_id = Column(
        Integer,
        ForeignKey('author.id'),
        primary_key=True
    )
    rank = Column(Unicode)

    def __init__(self, author, rank=None):
        self.author = author
        self.rank = rank

    author = relationship(Author, lazy='joined')


if __name__ == '__main__':
    make_searchable()
    engine = create_engine(
        'postgresql://test:test@localhost:5432/test',
        echo=True
    )
    Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)

    session = Session(engine)

    # create two authors
    chomsky = Author('Noam Chomsky')
    miller = Author('George A . Miller')
    session.add_all([chomsky, miller])
    session.commit()

    # create an book with a single author
    book1 = Book('Syntactic Structures')
    book1.description = 'Syntactic Structures is a book in linguistics by American linguist Noam Chomsky, first published in 1957'  # noqa
    # book1.book_authors.append(BookAuthor(chomsky))
    session.add(book1)
    session.commit()

    # create a book with two authors
    book2 = Book('Finite State Languages')
    book2.description = 'A finite state language is a finite or infinite set of strings (sentences) of symbols (words) generated by a finite set of rules (the grammar).'  # noqa
    # book2.book_authors.append(BookAuthor(chomsky, 'primary'))
    # book2.book_authors.append(BookAuthor(miller, 'secondary'))
    session.add(book2)
    session.commit()

    # query the book, print authors with their rank
    #books = session.query(Book).all()
    #for book in books:
    #    print('%s:' % book.title)
    #    print([
    #        (book_author.author.name, book_author.rank)
    #        for book_author in book.book_authors
    #    ])

    from sqlalchemy_searchable import search

    query = session.query(Book)

    query = search(query, 'Syntactic')
    print query.first().title
